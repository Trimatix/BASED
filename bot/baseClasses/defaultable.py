import inspect
from typing import Callable, Dict, Any, Optional, Tuple, List


def get_default_args(func: Callable) -> Dict[str, Any]:
    """Get a dictionary of the default kwarg values for a given function.
    https://stackoverflow.com/a/12627202

    :param Callable func: The function for which to read argument defaults
    :return: A dictionary with all of func's kwarg names as keys, and default values as defaults
    :rtype: Dict[str, Any]
    """
    signature = inspect.signature(func)
    return {
        k: v.default
        for k, v in signature.parameters.items()
        if v.default is not inspect.Parameter.empty
    }


class Defaultable:
    """Adds the following two methods: _makeDefaults and _allArgs.
    _makeDefaults constructs a maskable and overridable mapping of constructor keyword argument names to default values
    for those arguments. The unmodified default values mapping is saved to the _defaults class attribute as a naive cache.
    _allArgs simply returns an uncached list of all argument names for the class constructor.

    :var defaults: The unmodified constructor kwarg defaults generated by _makeDefaults
    :type defaults: Optional[Dict[str, Any]]
    """
    _defaults: Optional[Dict[str, Any]] = None

    @classmethod
    def _makeDefaults(cls, args : Dict[str, Any] = {}, ignores : Tuple[str, ...] = (), **overrides) -> Dict[str, Any]:
        """Creates a dictionary addressing each KEYWORD argument of this class's constructor.
        Does not address positional arguments.

        If a kwarg value is given in args, then it replaces the default value.
        Overrides acts as a secondary mask to args, replacing those values again.
        All keys listed in ignores are removed from the args dictionary prior to copying into the new dict.

        :param args: A dict of argument values to replace the default values with
        :type args: Dict[str, Any] 
        :param ignores: A list of keys to remove from the working copy of args prior to use
        :type ignores: Tuple[str]
        :param **overrides: values for any kwarg can be given to override the args values again.
        :return: A dictionary containing the default KWARG values for the class constructor, with values replaced by those
                in args (as long as they are not in ignores), but replace again by any overrides.
        :rtype: Dict[str, Any]
        """
        if cls._defaults is None:
            cls._defaults = get_default_args(cls.__init__)
        newArgs = cls._defaults.copy()
        if ignores:
            workingArgs = args.copy()
            for argName in ignores:
                if argName in workingArgs:
                    del workingArgs[argName]
            newArgs.update(workingArgs)
        else:
            newArgs.update(args)
        newArgs.update(overrides)
        return newArgs

    
    @classmethod
    def _allArgs(cls) -> List[str]:
        """Get a list of all argument names accepted by the class constructor, including positional and keyword.

        :return: All argument names for the subclass constructor
        :rtype: List[str]
        """
        return [str(i) for i in inspect.signature(cls).parameters]